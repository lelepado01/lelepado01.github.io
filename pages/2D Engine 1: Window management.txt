
###### descriptionsection In this part we'll be creating a window and handling most of SDL "boring stuff" 

# Quest For A 2D Engine

4/10/21

## Engine Class

The important thing to keep in mind is that most of the engine classes and methods will be static, as 
only one instance at the time can exist.

## SDL init

```
void Engine::InitSDL(){
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        LogSDLError(std::cout, "SDL_Init Error"); // This function will be explained later, it can be replaced with a print()
    }
    
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_FLAGS, SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG); // Always required on Mac
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 2);

    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);
    SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8);

    SDL_GL_SetSwapInterval(1); // Enable vsync
    
    SDL_WindowFlags window_flags = (SDL_WindowFlags)(SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE | SDL_WINDOW_ALLOW_HIGHDPI);
    // Window is a static variable of type SDL_Window
    // WINDOW_HEIGHT and WINDOW_WIDTH are static constants of type int, they determine width and height of the window
    Window = SDL_CreateWindow("Sdl2 Test", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, WINDOW_WIDTH, WINDOW_HEIGHT, window_flags);
}
```

It could be usesful to have a function to log any error happening in our code, the one shown below is very simple, 
but can be used to also print, for example, the file and the line where the error is happening, or it's type.

```
void Engine::LogSDLError(std::ostream &os, const std::string &msg){
    os << msg << " error: " << SDL_GetError() << std::endl;
}
```


## Renderer init

In the InitSDL() function, after the window creation, add:
```
// Again, Renderer is a static variable of type SDL_Renderer
Renderer = SDL_CreateRenderer(Window, -1, SDL_RENDERER_ACCELERATED);
if (Renderer == nullptr) {
    SDL_DestroyWindow(Window);
    LogSDLError(std::cout, "SDL_CreateRenderer Error");
    SDL_Quit();
}
```

## Clear the screen

It could be useful to have a simple function to clear the screen any color we want, 
to do that we can use the SDL\_Color struct

```
void Engine::ClearScreen(SDL_Color color) {
    SDL_SetRenderDrawColor(Renderer, color.r, color.g, color.b, color.a);
    SDL_RenderClear(Renderer);
}
```

## Cleaning up

```
void Engine::CleanupSDL(){
    SDL_DestroyWindow(Window);
    SDL_DestroyRenderer(Renderer);
    SDL_Quit();
}
```

## Final main.cpp file

###### relatedsection

 - 2D Engine 0
 - 2D Engine 2: Event handling
 - 2D Engine 3: Drawing textures
 - 2D Engine 4: Drawing primitives
 - 2D Engine 5: Handling Time
 - 2D Engine 6: Simple vectors